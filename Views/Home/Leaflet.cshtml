
<!--Einar, Arild-->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Leaflet Tutorial</title>

    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
          integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="" />

    <!-- Link to CSS style sheet-->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css">
    <link rel="stylesheet" href="map.css">

    <style>
        body {
            margin: 0;
            padding: 0;
        }

        #map {
            width: 100%;
            height: 86vh;
        }

        /* Coordinate readout: don’t block mouse/touch */
        .coordinate {
            position: absolute;
            bottom: 10px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(255,255,255,0.9);
            padding: 6px 10px;
            border-radius: 6px;
            font: 12px/1 system-ui, sans-serif;
            z-index: 1000;
            pointer-events: none;
        }
    </style>
</head>

<body>
    <div id="map">
        <div class="coordinate leaflet-control"></div>
        <div id="obstacleBox" class="leaflet-control">Report Obstacle</div>
    </div>

        <!-- Leaflet JS -->
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
            integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
            crossorigin=""></script>

    <script>
        // ---- Map init
        const map = L.map('map', {minZoom: 4}).setView([58.1638332, 7.9812789], 16);

        const osm = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
          attribution: '&copy; OpenStreetMap contributors'
        }).addTo(map);

        const darkMode = L.tileLayer('https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.{ext}', {
          minZoom: 0, maxZoom: 20, ext: 'png',
          attribution: '&copy; Stadia Maps & OpenMapTiles & OpenStreetMap'
        });

        const googleStreets = L.tileLayer('https://{s}.google.com/vt?lyrs=m&x={x}&y={y}&z={z}', {
          maxZoom: 20, subdomains:['mt0','mt1','mt2','mt3']
        });

        const googleSat = L.tileLayer('https://{s}.google.com/vt?lyrs=s&x={x}&y={y}&z={z}', {
          maxZoom: 20, subdomains:['mt0','mt1','mt2','mt3']
        });

       
        const singleMarker = L.marker([58.1638332, 7.9812789], { draggable: false })
          .bindPopup('Kristiansand Sykehus').addTo(map);
        
        L.control.layers(
          { 'OSM': osm, 'GoogleStreets': googleStreets, 'GoogleSat': googleSat, 'Darkmode': darkMode },
          { 'Marker': singleMarker },
          { collapsed: false }
        ).addTo(map);


        /*map.on('click', p => {
          const el = document.querySelector(".coordinate");
          if (el) el.textContent = `lat: ${p.latlng.lat}, lng: ${p.latlng.lng}`;
        });
        */

        // ---- Geolocation + follow logic
        let watchId = null;
        let following = false;
        let userMarker = null;
        let accuracyCircle = null;

        function renderUserLocation(lat, lng, accuracy) {
          if (!userMarker) {
            userMarker = L.marker([lat, lng], { title: 'You' }).addTo(map);
          } else {
            userMarker.setLatLng([lat, lng]);
          }

          if (!accuracyCircle) {
            accuracyCircle = L.circle([lat, lng], {
              radius: accuracy, color: '#2a83ff', weight: 0.3,
              fillColor: '#2a83ff', fillOpacity: 0.1
            }).addTo(map);
          } else {
            accuracyCircle.setLatLng([lat, lng]).setRadius(accuracy);
          }
        }

        function onPositionSuccess(position) {
          const { latitude: lat, longitude: lng, accuracy } = position.coords;
          renderUserLocation(lat, lng, accuracy);
          if (following) {
            map.setView([lat, lng], Math.max(map.getZoom(), 16), { animate: true });
          }
        }

        function onPositionError(err) {
          const msgs = {
            1: 'Geolocation permission denied. Enable it in your browser.',
            2: 'Position unavailable. Try enabling GPS/location services.',
            3: 'Timeout. Please try again.'
          };
          alert(msgs[err.code] || 'Couldn’t get your position.');
          setFollowing(false);
        }

        function startWatch() {
          if (!('geolocation' in navigator)) {
            alert('Your browser does not support geolocation.');
            return;
          }
          if (watchId !== null) return;
          // Immediate
          navigator.geolocation.getCurrentPosition(onPositionSuccess, onPositionError, {
            enableHighAccuracy: true, timeout: 10000, maximumAge: 0
          });
          // Continuous
          watchId = navigator.geolocation.watchPosition(onPositionSuccess, onPositionError, {
            enableHighAccuracy: true, timeout: 20000, maximumAge: 5000
          });
        }

        function stopWatch() {
          if (watchId !== null) {
            navigator.geolocation.clearWatch(watchId);
            watchId = null;
          }
        }

        function isLocalSecure() {
          return window.isSecureContext ||
                 ['localhost', '127.0.0.1', '::1'].includes(location.hostname);
        }

        function setFollowing(isOn) {
          following = isOn;
          if (isOn) {
            if (isLocalSecure()) {
              startWatch();
            } else {
              alert('Geolocation follow requires HTTPS or localhost/127.0.0.1/::1.');
              following = false;
            }
          } else {
            // stop to save battery when paused
            stopWatch();
          }
          // Update the Leaflet control’s look
          if (followCtrl && followCtrl.setUi) followCtrl.setUi(following);
        }

        // Pause follow when user interacts (so you can pan/zoom freely)
        map.on('dragstart zoomstart', () => {
          if (following) setFollowing(false);
        });



        // ---- Leaflet-style control (📍 pin that turns blue)
        const FollowControl = L.Control.extend({
          onAdd: function () {
            const container = L.DomUtil.create('div', 'leaflet-bar leaflet-control');
            const link = L.DomUtil.create('a', '', container);
            link.href = '#';
            link.title = 'Find me';
            link.innerHTML = '📍';
            link.style.width = '50px';
            link.style.height = '50px';
            link.style.lineHeight = '50px';
            link.style.textAlign = 'center';
            link.style.fontSize = '20px';

            L.DomEvent.on(link, 'click', L.DomEvent.stop)
                      .on(link, 'click', () => setFollowing(!following));

            this._link = link;
            this.setUi(false);     // start gray
            return container;
          },
          setUi: function (isOn) {
            if (!this._link) return;
            this._link.title = isOn ? 'Following (click to pause)' : 'Find me';
            this._link.style.background = isOn ? '#1e88e5' : '#fff';
            this._link.style.color = isOn ? '#fff' : '#000';
          }
        });

        const followCtrl = new FollowControl({ position: 'topleft' }).addTo(map);

    </script>
</body>
</html>